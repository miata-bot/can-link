searchNodes=[{"doc":"Root level device configuration. Versioned for introspection in the future. Contians configuration for the spect radio network. See the network document for more information.","ref":"Spect.Config.html","title":"Spect.Config","type":"module"},{"doc":"Config.id will always be zero","ref":"Spect.Config.html#t:config_id/0","title":"Spect.Config.config_id/0","type":"type"},{"doc":"Root level device configuration. Mostly a container for other records.","ref":"Spect.Config.html#t:t/0","title":"Spect.Config.t/0","type":"type"},{"doc":"Current config version. Currently unused","ref":"Spect.Config.html#t:version/0","title":"Spect.Config.version/0","type":"type"},{"doc":"Represents an effect running the device. Effects are implemented as Lua scripts internally. Mode is a bitfield described below There are 8 effect slots total Each slot may use up to or all of the 8 sections on the device. See the sections document for a description of how that works.","ref":"Spect.EffectSlot.html","title":"Spect.EffectSlot","type":"module"},{"doc":"Mode is a bitfield struct 7 6 5 4 3 2 1 0 effect enable radio sync can sync - - - - - Bits 4-8 are reserved for future use effect_enalbe - enable or disable this effect slot radio_sync - enable or disable syncing of this slot on the network can_sync - enable or disable syncing of this slot via CAN","ref":"Spect.EffectSlot.html#t:mode/0","title":"Spect.EffectSlot.mode/0","type":"type"},{"doc":"","ref":"Spect.EffectSlot.html#t:slot_id/0","title":"Spect.EffectSlot.slot_id/0","type":"type"},{"doc":"Represents a slot for a potentially running effect mode is a bitfield described above script_name is the name of the lua script that should be running","ref":"Spect.EffectSlot.html#t:t/0","title":"Spect.EffectSlot.t/0","type":"type"},{"doc":"Represents a radio network instance. A network is refered to by it's ID which is a 10 bit integer. Encryption A network can be encrypted at the radio level. This is enabled by having the key set. Packets are encrypted entirely, and the network concept is implemented on top of that, so if a packet is encrypted such that it changes the network id bits, packets will not be routed to the correct network, and also contain nonsense.","ref":"Spect.Network.html","title":"Spect.Network","type":"module"},{"doc":"Encryption key. If set, all packets received on this network will be encrypted/decryped by this key. Must be EXACTLY 16 bytes if set.","ref":"Spect.Network.html#t:key/0","title":"Spect.Network.key/0","type":"type"},{"doc":"network's ID number. 10 bit integer ranging from 1..1023","ref":"Spect.Network.html#t:network_id/0","title":"Spect.Network.network_id/0","type":"type"},{"doc":"Current network configuration","ref":"Spect.Network.html#t:t/0","title":"Spect.Network.t/0","type":"type"},{"doc":"Represents the current device's radio identity. This should be set once and never changed.","ref":"Spect.Network.Identity.html","title":"Spect.Network.Identity","type":"module"},{"doc":"should never change in the DB","ref":"Spect.Network.Identity.html#t:network_identity_id/0","title":"Spect.Network.Identity.network_identity_id/0","type":"type"},{"doc":"The current node's identity","ref":"Spect.Network.Identity.html#t:t/0","title":"Spect.Network.Identity.t/0","type":"type"},{"doc":"Represents the current device's radio leader. Leaders can be changed at runtime.","ref":"Spect.Network.Leader.html","title":"Spect.Network.Leader","type":"module"},{"doc":"current leader's node id","ref":"Spect.Network.Leader.html#t:network_leader_id/0","title":"Spect.Network.Leader.network_leader_id/0","type":"type"},{"doc":"The current device's radio leader. The leader node broadcasts it's own state as well as some other information. See the Radio document for how the protocol acts.","ref":"Spect.Network.Leader.html#t:t/0","title":"Spect.Network.Leader.t/0","type":"type"},{"doc":"Radio node","ref":"Spect.Network.Node.html","title":"Spect.Network.Node","type":"module"},{"doc":"unsigned 64 bit int","ref":"Spect.Network.Node.html#t:last_seen/0","title":"Spect.Network.Node.last_seen/0","type":"type"},{"doc":"10 bit node id","ref":"Spect.Network.Node.html#t:node_id/0","title":"Spect.Network.Node.node_id/0","type":"type"},{"doc":"16 bit signed int","ref":"Spect.Network.Node.html#t:rssi/0","title":"Spect.Network.Node.rssi/0","type":"type"},{"doc":"Represents a node on the network. Node Info is unknown by default, it must be gathered at runtime. Each network may have 1023 nodes technically, but one node is indistinguishable from another without knowing what the currently configured network is.","ref":"Spect.Network.Node.html#t:t/0","title":"Spect.Network.Node.t/0","type":"type"},{"doc":"Join between Network and Node to allow for the same node database to be used for multiple networks. This table is populated with information about a node per this network","ref":"Spect.NetworkNode.html","title":"Spect.NetworkNode","type":"module"},{"doc":"Name of the node on this network","ref":"Spect.NetworkNode.html#t:node_name/0","title":"Spect.NetworkNode.node_name/0","type":"type"},{"doc":"join of network and node","ref":"Spect.NetworkNode.html#t:t/0","title":"Spect.NetworkNode.t/0","type":"type"},{"doc":"Section of one entire strip There are 8 of these total that can be distributed into 8 different Effects and 4 different Triggers","ref":"Spect.Section.html","title":"Spect.Section","type":"module"},{"doc":"","ref":"Spect.Section.html#changeset/2","title":"Spect.Section.changeset/2","type":"function"},{"doc":"","ref":"Spect.Section.html#t:section_id/0","title":"Spect.Section.section_id/0","type":"type"},{"doc":"start/end of a section of the entire buffer","ref":"Spect.Section.html#t:t/0","title":"Spect.Section.t/0","type":"type"},{"doc":"Join table between section and slot","ref":"Spect.SlotSection.html","title":"Spect.SlotSection","type":"module"},{"doc":"","ref":"Spect.SlotSection.html#t:slot_section_id/0","title":"Spect.SlotSection.slot_section_id/0","type":"type"},{"doc":"join table on section and slot","ref":"Spect.SlotSection.html#t:t/0","title":"Spect.SlotSection.t/0","type":"type"},{"doc":"These documents are intended for software developers of potential contributors to the project's firmware.","ref":"readme.html","title":"Software Developer Documentation","type":"extras"},{"doc":"First follow the The getting started guide . This will take you thru setting up a dev environment to flash and debug firmware.","ref":"readme.html#getting-started","title":"Software Developer Documentation - Getting started","type":"extras"},{"doc":"cd project_root/firmware/spect idf.py build","ref":"readme.html#build-firmware","title":"Software Developer Documentation - Build Firmware","type":"extras"},{"doc":"hold the download button power the device on cd project_root/firmware/spect idf.py flash","ref":"readme.html#flash-firmware","title":"Software Developer Documentation - Flash Firmware","type":"extras"},{"doc":"cd project_root/firmware/spect idf.py monitor","ref":"readme.html#monitor-firmware","title":"Software Developer Documentation - Monitor Firmware","type":"extras"},{"doc":"","ref":"ble.html","title":"BLE","type":"extras"},{"doc":"","ref":"can.html","title":"CAN Data Format","type":"extras"},{"doc":"CAN ID Data 0x69 command::8, payload::56 Command is 1 byte, the payload can take up the remaining 7 bytes.","ref":"can.html#can-id","title":"CAN Data Format - CAN ID","type":"extras"},{"doc":"Command Name Data 0x0::8 PWR rgb0::1, rgb1::1, addr0::1, addr1::1 0x1::7, channel::1 RGB r::8, g::8, b::8 0x2::7, channel::1 Fade time_ms:: 16, r::8, g::8, b::8, r::8, g::8, b::8 0x3::7, channel::1 Pixel address::16, r::8, g::8, b::8 0x4::7, channel::1 Fill start::16, end::16, r::8, g::8, b::8 0x5::7, channel::1 Blit -- 0x6::8 Mode mode::8 Command Description PWR controls which features are enabled. each feature is represented by a single bit RGB Set a RGB channel color. 24 bit color Fade Fade over time_ms from one 24 bit color to another Pixel Set a pixel on an addressable channel to a 24 bit color Fill Fill an addressable channel from start to end with a 24 bit color Blit Show the current buffer Mode change mode. See Modes section","ref":"can.html#commands","title":"CAN Data Format - Commands","type":"extras"},{"doc":"ID Name 0x0 Manual Control Mode 0x1::7, txrx::1 Radio Control Mode txrx=0 for &quot;sender&quot; txrx=1 for &quot;receiver 0x4 Lua Scripting mode 0x5::3, anim::5 animation mode. 0=rainbow, 1-31=reserved for future use","ref":"can.html#modes","title":"CAN Data Format - Modes","type":"extras"},{"doc":"This should be done on Linux. if you're not using Linux, get rekt i guess. clone this repo: git clone git@github.com:miata-bot/can-link.git clone submodules: git submodule --init --recursive install esp idf apply patches to sqlite3: cd firmware/spect/components/esp-idf-sqlite3 &amp;&amp; git patch am ../*.patch install asdf install erlang and elixir: cd interface/spect &amp;&amp; asdf install fetch dependencies: cd interface/spect &amp;&amp; mix deps.get run migrations: cd interface/spect &amp;&amp; mix ecto.migrate build firmware: cd firmware/spect &amp;&amp; idf.py build If and only of these stepes succeed should you procede. Return to the README","ref":"getting-started.html","title":"Settingup a development environment","type":"extras"}]